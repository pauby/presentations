unless Vagrant.has_plugin?("vagrant-reload")
  raise 'vagrant-reload is not installed!'
end

Vagrant.configure("2") do |config|

  config.vm.define "presentation" do |cfg|

    #
    # Variables
    #
    folder_syncs = [
      { local: '../resources/packages', remote: '/packages' },
      { local: '../resources/licenses', remote: '/licenses' },
      { local: '../shell',              remote: '/shell' },
      { local: 'presentations',         remote: '/presentations' }
    ]

    cfg.vm.box = "StefanScherer/windows_2016"
    cfg.vm.hostname = "presentation"

    cfg.windows.halt_timeout = 60
    # https://github.com/hashicorp/vagrant/issues/6430
    cfg.winrm.retry_limit = 30
    cfg.winrm.retry_delay = 10

    cfg.winrm.username = "vagrant"
    cfg.winrm.password = "vagrant"
    cfg.vm.guest = :windows
    cfg.vm.communicator = "winrm"

    cfg.windows.set_work_network = true

    cfg.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true, host_ip: "127.0.0.1"
    cfg.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true, host_ip: "127.0.0.1"
    cfg.vm.network :forwarded_port, guest: 22, host: 2222, id: "ssh", auto_correct: true, host_ip: "127.0.0.1"

    folder_syncs.each do |folder|
      #print "Folder sync local: #{folder[:local]} | remote: #{folder[:remote]} | smb_username: #{folder[:smb_username]} | smb_password: #{folder[:smb_password]}"
      cfg.vm.synced_folder folder[:local], folder[:remote]
    end

    cfg.vm.provision :shell, :path => "../shell/ConfigureAutoLogin.ps1", privileged: true
    cfg.vm.provision :shell, :path => "../shell/PrepareWindows.ps1", privileged: true
    cfg.vm.provision :shell, :path => "../shell/SetRegion.ps1", args: "-Region 'UK'", privileged: true
    cfg.vm.provision :shell, :path => "../shell/InstallChocolatey.ps1", args: "-UseLocalSource", run: "once", privileged: true
    cfg.vm.provision :shell, :path => "../shell/NotifyGuiAppsOfEnvironmentChanges.ps1", run: "once", privileged: true
    cfg.vm.provision :shell, :path => "../shell/InstallVMGuestTools.ps1", run: "once", privileged: true
    # This is very distracting during presenting so commenting it out - don't delete so we know why it's not used
    #cfg.vm.provision :shell, :path => "../../shell/InstallBGInfo.ps1", privileged: false
    cfg.vm.provision :shell, :path => "../shell/InstallChocoPackage.ps1", args: "-Name 'vscode, vscode-powershell, pester, psscriptanalyzer, zoomit, notepadplusplus, 7zip'", run: "once", privileged: true

    # reload machine to have the auto-login and bginfo kick in
    cfg.vm.provision :reload

    cfg.vm.provision "Allow Outbound Winrm", type: "shell", run: "once", privileged: true, inline: <<-SHELL
      winrm set winrm/config/client '@{TrustedHosts="chocotest"}'
    SHELL

    cfg.vm.provision "Add Environment Variables", type: "shell", run: "once", privileged: true, inline: <<-SHELL
      [System.Environment]::SetEnvironmentVariable("LocalChocoPackages", "c:\packages", "Machine")
      [System.Environment]::SetEnvironmentVariable("LocalChocoLicenses", "c:\licenses", "Machine")
    SHELL

    cfg.vm.provision "Add Desktop Presentation Shortcuts", type: "shell", run: "once", privileged: true, inline: <<-SHELL
      # Taken from https://stackoverflow.com/questions/28997799/how-to-create-a-run-as-administrator-shortcut-using-powershell
      $WshShell = New-Object -comObject WScript.Shell
      $Shortcut = $WshShell.CreateShortcut("$Home\\Desktop\\VS Code Presentation.lnk")
      $Shortcut.TargetPath = "C:\\Program Files\\Microsoft VS Code\\Code.exe"
      $Shortcut.Save()

      $bytes = [System.IO.File]::ReadAllBytes("$Home\\Desktop\\VS Code Presentation.lnk")
      $bytes[0x15] = $bytes[0x15] -bor 0x20 #set byte 21 (0x15) bit 6 (0x20) ON
      [System.IO.File]::WriteAllBytes("$Home\\Desktop\\VS Code Presentation.lnk", $bytes)

      #git clone https://github.com/pauby/presentations c:\\git-presentations --depth 1 -q
      Remove-Variable -Name 'Shortcut' -Force -ErrorAction SilentlyContinue
      $WshShell = New-Object -comObject WScript.Shell
      $Shortcut = $WshShell.CreateShortcut("$Home\\Desktop\\Open Jenkins.lnk")
      $Shortcut.TargetPath = "C:\\Program Files\\Internet Explorer\\iexplore.exe"
      $Shortcut.Arguments = "http://localhost:8080"
      $Shortcut.Save()
    SHELL

    cfg.vm.provision "Create Zoomit Startup Shortcut", type: "shell", run: "once", privileged: true, inline: <<-SHELL
      $WshShell = New-Object -comObject WScript.Shell
      $link = Join-Path -Path ([Environment]::GetFolderPath('Startup')) -ChildPath 'Zoomit.lnk'
      $Shortcut = $WshShell.CreateShortcut($link)
      $Shortcut.TargetPath = (Join-Path -Path $env:ChocolateyInstall -Childpath 'bin\\zoomit.exe')
      $Shortcut.Save()

      # Launch Zoomit
      & (Join-Path -Path $env:ChocolateyInstall -Childpath 'bin/zoomit.exe')
    SHELL

    cfg.vm.post_up_message = "All done!"

        #
    # Providers
    #
    cfg.vm.provider :virtualbox do |v, override|
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.gui = true
      v.customize ["modifyvm", :id, "--cpus", "1"]
      # turn on nested virtualization
      v.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
      v.customize ["modifyvm", :id, "--vram", 128]
      v.customize ["modifyvm", :id, "--memory", "2048"]
      v.customize ["modifyvm", :id, "--audio", "none"]
      v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      v.customize ["modifyvm", :id, "--draganddrop", "hosttoguest"]
      v.customize ["modifyvm", :id, "--usb", "off"]
      v.linked_clone = true
    end

    config.vm.provider :hyperv do |v, override|
      override.vm.network "public_network", bridge: "Default Switch"
      v.enable_virtualization_extensions = true
      v.maxmemory = 2048
      v.cpus = 1
      v.ip_address_timeout = 130
      v.linked_clone = true
      v.vm_integration_services = {
        guest_service_interface: true,
        heartbeat: true,
        key_value_pair_exchange: true,
        shutdown: true,
        time_synchronization: true,
        vss: true
      }

      smbcreds_filename = 'vagrant-smb.txt'
      if File.exists?(smbcreds_filename)
        file_data = File.read(smbcreds_filename).split
        smbusername = file_data[0]
        smbpassword = file_data[1]

        folder_syncs.each do |folder|
          #print "Folder sync local: #{folder[:local]} | remote: #{folder[:remote]} | smb_username: #{folder[:smb_username]} | smb_password: #{folder[:smb_password]}"
          override.vm.synced_folder folder[:local], folder[:remote], smb_username: smbusername, smb_password: smbpassword
        end
      end

      override.vm.provision "Stop SMB Idle Disconnects", type: 'shell', run: 'once', privileged: true, inline: 'net config server /autodisconnect:-1'
    end

  end

  config.vm.define "chocotest" do |cfg|

    #
    # Variables
    #
    # we always need at least one synced folder in Hyper-V to grab the SMB credentials
    folder_syncs = [
      { local: '../shell', remote: '/shell' }
    ]

    #
    # Providers
    #
    cfg.vm.provider :virtualbox do |v, override|
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.gui = true
      v.customize ["modifyvm", :id, "--cpus", "1"]
      # turn on nested virtualization
      v.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
      v.customize ["modifyvm", :id, "--vram", 128]
      v.customize ["modifyvm", :id, "--memory", "2048"]
      v.customize ["modifyvm", :id, "--audio", "none"]
      v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      v.customize ["modifyvm", :id, "--draganddrop", "hosttoguest"]
      v.customize ["modifyvm", :id, "--usb", "off"]
      v.linked_clone = true
    end

    config.vm.provider :hyperv do |v, override|
      override.vm.network "public_network", bridge: "Default Switch"
      v.enable_virtualization_extensions = true
      v.maxmemory = 2048
      v.cpus = 1
      v.ip_address_timeout = 130
      v.linked_clone = true
      v.vm_integration_services = {
        guest_service_interface: true,
        heartbeat: true,
        key_value_pair_exchange: true,
        shutdown: true,
        time_synchronization: true,
        vss: true
      }

      smbcreds_filename = 'vagrant-smb.txt'
      if File.exists?(smbcreds_filename)
        file_data = File.read(smbcreds_filename).split
        smbusername = file_data[0]
        smbpassword = file_data[1]

        folder_syncs.each do |folder|
          #print "Folder sync local: #{folder[:local]} | remote: #{folder[:remote]} | smb_username: #{folder[:smb_username]} | smb_password: #{folder[:smb_password]}"
          override.vm.synced_folder folder[:local], folder[:remote], smb_username: smbusername, smb_password: smbpassword
        end
      end

      override.vm.provision "Stop SMB Idle Disconnects", type: 'shell', run: 'once', privileged: true, inline: 'net config server /autodisconnect:-1'
    end
  end
end